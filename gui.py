
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import tensorflow as tf
import numpy as np

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Label, Button, PhotoImage, filedialog, ttk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/rbizet/Desktop/Samba_DS50/DS50/build/assets/frame0")

model = tf.keras.models.load_model('/home/rbizet/Desktop/Samba_DS50/DS50/models', compile=False)
model.compile() 


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def choose_model():
    if selected_model.get() == 'Sélectionnez modèle' :
        print("Aucun modèle choisi")
    elif selected_model.get() == 'Tensorflow' :
        predict_tensorflow()
    else:
        predict_pytorch()

def predict_pytorch():
    print("Prediction Pytorch")

# Fonction pour charger et traiter l'image sélectionnée par l'utilisateur
def predict_tensorflow():
    class_names = ['adenocarcinoma', 'large.cell.carcinoma', 'normal', 'squamous.cell.carcinoma']

    # Ouvrir l'explorateur de fichiers pour sélectionner une image
    image_path = filedialog.askopenfilename(initialdir="/", title="Sélectionner une image",
                                            filetypes=(("Fichiers image", "*.jpg *.jpeg *.png"), ("Tous les fichiers", "*.*")))
    if image_path:
        # Charger l'image
        img = tf.keras.utils.load_img(
            image_path, target_size=(180, 180)
        )
        img_array = tf.keras.utils.img_to_array(img)
        img_array = tf.expand_dims(img_array, 0) # Create a batch

        # Faire la prédiction
        predictions = model.predict(img_array)
        score = tf.nn.softmax(predictions[0])

        print(
            "This image most likely belongs to {} with a {:.2f} percent confidence."
            .format(class_names[np.argmax(score)], 100 * np.max(score))
        )
        
        # Afficher les résultats
        result_label.config(text="This image most likely belongs to {} with a {:.2f} percent confidence."
                              .format(class_names[np.argmax(score)], 100 * np.max(score)))

window = Tk()

window.title("Prédicteur")

window.geometry("663x585")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 585,
    width = 663,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    663.0,
    585.0,
    fill="#9B6C6C",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    336.0,
    249.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=choose_model,
    relief="flat"
)
button_1.place(
    x=212.0,
    y=391.0,
    width=238.0,
    height=60.0
)

canvas.create_text(
    191.0,
    61.0,
    anchor="nw",
    text="Détecteur de cancer",
    fill="#FFFFFF",
    font=("Inter", 30 * -1)
)

result_label = Label(
    anchor="nw",
    text="Prediction",
    font=("Inter", 15 * -1)
)
result_label.place(
    x=64.0,
    y=508.0
)

# create a combobox
selected_model = tk.StringVar()
selected_model_cb = ttk.Combobox(window, textvariable=selected_model)
selected_model_cb['values'] = ['Sélectionnez modèle','Pytorch', 'Tensorflow']
selected_model_cb['state'] = 'readonly'
selected_model_cb.place(x=64.0, y=475)


window.resizable(False, False)
window.mainloop()
