# -*- coding: utf-8 -*-
"""teste_DenseNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1THYKG3BK17-XrkU23-Jx233gRXDriGJy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.densenet import DenseNet121
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.applications.imagenet_utils import preprocess_input

train_datagen = ImageDataGenerator(rescale=1./255, 
                                   shear_range=0.2, 
                                   zoom_range=0.2,
                                   horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory('/content/drive/MyDrive/image_poumon/train',
                                                    target_size=(224, 224),
                                                    batch_size=32,
                                                    class_mode='categorical')

val_generator = val_datagen.flow_from_directory('/content/drive/MyDrive/image_poumon/valid',
                                                target_size=(224, 224),
                                                batch_size=32,
                                                class_mode='categorical')

densenet = DenseNet121(input_shape=(224, 224, 3), include_top=False, weights='imagenet')

for layer in densenet.layers:
    layer.trainable = False

x = Flatten()(densenet.output)
prediction = Dense(4, activation='softmax')(x)

model = Model(inputs=densenet.input, outputs=prediction)
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

class_weights = {0: 195.0, 1: 115.0, 2: 148.0, 3: 155.0}

history = model.fit(train_generator,
                    validation_data=val_generator,
                    epochs=10,
                    class_weight = class_weights)

#evaluation du modèle
model.evaluate(val_generator)

# Charger une image de test et la prétraiter
img = load_img('/content/drive/MyDrive/image_poumon/train/adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib/000022.png', target_size=(224, 224))
x = img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

# Faire une prédiction
prediction = model.predict(x)

# Obtenir la classe prédite
predicted_class = np.argmax(prediction)
class_names = {0: 'adenocarcinoma', 1: 'large_cell_carcinoma', 2: 'normal', 3: 'squamous_cell_carcinoma'}
print(train_generator.class_indices)
predicted_class_name = class_names.get(predicted_class)

# Afficher les résultats
print('Prédiction:', prediction)
print('Classe prédite:', predicted_class_name)